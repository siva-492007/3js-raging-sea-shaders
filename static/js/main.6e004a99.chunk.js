(this["webpackJsonpragin-sea-shaders"]=this["webpackJsonpragin-sea-shaders"]||[]).push([[0],{18:function(e,n,o){},19:function(e,n,o){},22:function(e,n,o){"use strict";o.r(n);var i=o(8),a=o.n(i),t=o(11),r=o.n(t),v=(o(18),o(19),o(4)),l=o(13),u=o(12),s=o(6),c=function(){var e=new v.i,n=document.querySelector(".webgl"),o=new u.a.GUI,i={},a={width:window.innerWidth,height:window.innerHeight},t={x:0,y:0};window.addEventListener("mousemove",(function(e){t.x=e.clientX/a.width-.5,t.y=e.clientY/a.height-.5}));new v.m;var r=new v.g(2,2,512,512);i.depthColor="#186691",i.surfaceColor="#9bd8ff";var c=new v.j({vertexShader:"\n\nuniform float uTime;\nuniform float uBigWavesElevation;\nuniform vec2 uBigWavesFrequency;\nuniform float uBigWavesSpeed;\n\nuniform float uSmallWavesElevation;\nuniform float uSmallWavesFrequency;\nuniform float uSmallWavesSpeed;\nuniform float uSmallIterations;\n\nvarying vec2 vUV;\nvarying float vElevation;\n\n//\tClassic Perlin 3D Noise \n//\tby Stefan Gustavson\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nvec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\nfloat cnoise(vec3 P){\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod(Pi0, 289.0);\n  Pi1 = mod(Pi1, 289.0);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 / 7.0;\n  vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 / 7.0;\n  vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n  return 2.2 * n_xyz;\n}\n\nvoid main(){\n    vec4 modelPosition = modelMatrix * vec4(position, 1.0);\n\n    /* Elevation */\n    float elevation = sin(modelPosition.x * uBigWavesFrequency.x + uTime * uBigWavesSpeed) *\n                      sin(modelPosition.z * uBigWavesFrequency.y + uTime * uBigWavesSpeed) *\n                      uBigWavesElevation;\n\n    for( float i = 1.0; i <= uSmallIterations; i++ ){\n        elevation -= abs( \n            cnoise(\n                vec3(\n                    modelPosition.xz * uSmallWavesFrequency * i, \n                    uTime * uSmallWavesSpeed\n                )\n            ) * uSmallWavesElevation / i\n        );\n    }\n\n    modelPosition.y += elevation;\n\n    vec4 viewPosition = viewMatrix * modelPosition;\n    vec4 projectionPosition = projectionMatrix * viewPosition;\n\n    gl_Position = projectionPosition;\n\n    vUV = uv;\n    vElevation = elevation;\n}\n",fragmentShader:"\n\n    uniform vec3 uDepthColor;\n    uniform vec3 uSurfaceColor;\n    uniform float uColorOffset;\n    uniform float uColorOffsetMultiplier;\n\n    varying float vElevation;\n\n    varying vec2 vUV;\n\n    void main(){\n        \n        // we are going to mix uDepthColor and uSurfaceColor based on vElevation\n        float mixStrength = ( vElevation + uColorOffset ) * uColorOffsetMultiplier;\n        vec3 color = mix(uDepthColor, uSurfaceColor, mixStrength);\n\n\n        // gl_FragColor = vec4(0.5, 0.8, 1.0, 1.0);\n        gl_FragColor = vec4(color, 1.0);\n\n    }\n\n",uniforms:{uTime:{value:0},uBigWavesElevation:{value:.2},uBigWavesFrequency:{value:new v.n(4,1.5)},uBigWavesSpeed:{value:.75},uDepthColor:{value:new v.b(i.depthColor)},uSurfaceColor:{value:new v.b(i.surfaceColor)},uColorOffset:{value:.08},uColorOffsetMultiplier:{value:5},uSmallWavesElevation:{value:.15},uSmallWavesFrequency:{value:3},uSmallWavesSpeed:{value:.2},uSmallIterations:{value:4}}});o.add(c.uniforms.uBigWavesElevation,"value").min(0).max(1).step(.001).name("uBigWavesElevation"),o.add(c.uniforms.uBigWavesFrequency.value,"x").min(0).max(10).step(.001).name("uBigWavesFrequencyX"),o.add(c.uniforms.uBigWavesFrequency.value,"y").min(0).max(10).step(.001).name("uBigWavesFrequencyY"),o.add(c.uniforms.uBigWavesSpeed,"value").min(0).max(5).step(.001).name("uBigWavesSpeed"),o.add(c.uniforms.uSmallWavesElevation,"value").min(0).max(1).step(.001).name("uSmallWavesElevation"),o.add(c.uniforms.uSmallWavesFrequency,"value").min(0).max(30).step(.001).name("uSmallWavesFrequency"),o.add(c.uniforms.uSmallWavesSpeed,"value").min(0).max(4).step(.001).name("uSmallWavesSpeed"),o.add(c.uniforms.uSmallIterations,"value").min(0).max(5).step(.001).name("uSmallIterations"),o.add(c.uniforms.uColorOffset,"value").min(0).max(1).step(.001).name("uColorOffset"),o.add(c.uniforms.uColorOffsetMultiplier,"value").min(0).max(10).step(.001).name("uColorOffsetMultiplier"),o.addColor(i,"depthColor").onChange((function(){c.uniforms.uSurfaceColor.value.set(i.depthColor)})),o.addColor(i,"surfaceColor").onChange((function(){c.uniforms.uDepthColor.value.set(i.surfaceColor)}));var g=new v.e(r,c);g.rotation.x=.5*-Math.PI,e.add(g);var f=new v.f(70,a.width/a.height,.1,100);f.position.set(1,1,1),e.add(f),window.addEventListener("resize",(function(){a.width=window.innerWidth,a.height=window.innerHeight,f.aspect=a.width/a.height,f.updateProjectionMatrix(),d.setSize(a.width,a.height),d.setPixelRatio(Math.min(window.devicePixelRatio,2))}));var m=new l.a(f,n);m.enableDamping=!0;var d=new v.p({canvas:n});d.setSize(a.width,a.height);var x=new v.a;return function n(){var o=x.getElapsedTime();o,c.uniforms.uTime.value=o,m.update(),d.render(e,f),window.requestAnimationFrame(n)}(),Object(s.jsx)(s.Fragment,{})};var g=function(){return Object(s.jsx)("div",{className:"App",children:Object(s.jsx)(c,{})})},f=function(e){e&&e instanceof Function&&o.e(3).then(o.bind(null,23)).then((function(n){var o=n.getCLS,i=n.getFID,a=n.getFCP,t=n.getLCP,r=n.getTTFB;o(e),i(e),a(e),t(e),r(e)}))};r.a.render(Object(s.jsx)(a.a.StrictMode,{children:Object(s.jsx)(g,{})}),document.getElementById("root")),f()}},[[22,1,2]]]);
//# sourceMappingURL=main.6e004a99.chunk.js.map