{"version":3,"sources":["Components/RagingSeaShaders.js","Shaders/WaterVertexShader.js","Shaders/WaterFragmentShader.js","App.js","reportWebVitals.js","index.js"],"names":["RagingSeaShaders","scene","THREE","canvas","document","querySelector","gui","dat","GUI","debugObject","size","width","window","innerWidth","height","innerHeight","cursor","x","y","addEventListener","event","clientX","clientY","waterGeometry","depthColor","surfaceColor","waterMaterial","vertexShader","fragmentShader","uniforms","uTime","value","uBigWavesElevation","uBigWavesFrequency","uBigWavesSpeed","uDepthColor","uSurfaceColor","uColorOffset","uColorOffsetMultiplier","uSmallWavesElevation","uSmallWavesFrequency","uSmallWavesSpeed","uSmallIterations","add","min","max","step","name","addColor","onChange","set","water","rotation","Math","PI","camera","position","aspect","updateProjectionMatrix","renderer","setSize","setPixelRatio","devicePixelRatio","controls","OrbitControls","enableDamping","clock","tick","elapsedTime","getElapsedTime","update","render","requestAnimationFrame","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6e004a99.chunk.js","sourcesContent":["import * as THREE from 'three';\r\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\r\nimport dat from 'dat.gui';\r\nimport {waterVertexShader} from '../Shaders/WaterVertexShader';\r\nimport {waterFragmentShader} from '../Shaders/WaterFragmentShader';\r\n\r\n\r\nconst RagingSeaShaders = () => {\r\n\r\n    const scene = new THREE.Scene();\r\n\r\n    const canvas = document.querySelector('.webgl');\r\n\r\n    const gui = new dat.GUI();\r\n    const debugObject = {};\r\n\r\n    const size = {\r\n        width: window.innerWidth,\r\n        height: window.innerHeight\r\n    };\r\n\r\n\r\n    const cursor = {\r\n        x: 0,\r\n        y: 0\r\n    };\r\n\r\n    window.addEventListener('mousemove', (event) => {\r\n        cursor.x = event.clientX / size.width -0.5;\r\n        cursor.y = event.clientY / size .height  -0.5;\r\n    });\r\n\r\n    /*\r\n    * Textures\r\n    */\r\n    const textureLoader = new THREE.TextureLoader();\r\n\r\n    // geometry\r\n    const waterGeometry = new THREE.PlaneBufferGeometry(2, 2, 512, 512);\r\n\r\n\r\n    // color\r\n    // intially we have depthColor = '#0000ff' and surfaceColor = '#8888ff'.\r\n    // after finding the rigth value using debug gui, we can change the values of color, uColorOffset, uColorOffsetMultiplier, etc\r\n    debugObject.depthColor = '#186691';\r\n    debugObject.surfaceColor = '#9bd8ff';\r\n\r\n\r\n    // material \r\n    const waterMaterial = new THREE.ShaderMaterial({ \r\n        vertexShader: waterVertexShader,\r\n        fragmentShader: waterFragmentShader,\r\n        uniforms:{\r\n            uTime: { value: 0 },\r\n\r\n            uBigWavesElevation: { value: 0.2 },\r\n            uBigWavesFrequency: { value: new THREE.Vector2(4, 1.5) },\r\n            uBigWavesSpeed: { value: 0.75 },\r\n            \r\n            uDepthColor: { value: new THREE.Color(debugObject.depthColor) },\r\n            uSurfaceColor: { value: new THREE.Color(debugObject.surfaceColor) },\r\n            \r\n            // initially we have uColorOffset = 0.25 and uColorOffsetMultiplier = 2\r\n            // after finding the rigth value using debug gui, we can change the values of color, uColorOffset, uColorOffsetMultiplier, etc\r\n            uColorOffset: { value: 0.08 },\r\n            uColorOffsetMultiplier: { value: 5},\r\n\r\n            uSmallWavesElevation: { value: 0.15 },\r\n            uSmallWavesFrequency: { value: 3 },\r\n            uSmallWavesSpeed: { value: 0.2 },\r\n            uSmallIterations: { value: 4 }\r\n        }\r\n     });\r\n\r\n     // Debug gui\r\n     gui.add(waterMaterial.uniforms.uBigWavesElevation, 'value').min(0).max(1).step(0.001).name('uBigWavesElevation');\r\n     gui.add(waterMaterial.uniforms.uBigWavesFrequency.value, 'x').min(0).max(10).step(0.001).name('uBigWavesFrequencyX');\r\n     gui.add(waterMaterial.uniforms.uBigWavesFrequency.value, 'y').min(0).max(10).step(0.001).name('uBigWavesFrequencyY');\r\n     gui.add(waterMaterial.uniforms.uBigWavesSpeed, 'value').min(0).max(5).step(0.001).name('uBigWavesSpeed');\r\n     \r\n     gui.add(waterMaterial.uniforms.uSmallWavesElevation, 'value').min(0).max(1).step(0.001).name('uSmallWavesElevation');\r\n     gui.add(waterMaterial.uniforms.uSmallWavesFrequency, 'value').min(0).max(30).step(0.001).name('uSmallWavesFrequency');\r\n     gui.add(waterMaterial.uniforms.uSmallWavesSpeed, 'value').min(0).max(4).step(0.001).name('uSmallWavesSpeed');\r\n     gui.add(waterMaterial.uniforms.uSmallIterations, 'value').min(0).max(5).step(0.001).name('uSmallIterations');\r\n     \r\n     gui.add(waterMaterial.uniforms.uColorOffset, 'value').min(0).max(1).step(0.001).name('uColorOffset');\r\n     gui.add(waterMaterial.uniforms.uColorOffsetMultiplier, 'value').min(0).max(10).step(0.001).name('uColorOffsetMultiplier');\r\n     gui.addColor(debugObject, 'depthColor').onChange(() => { waterMaterial.uniforms.uSurfaceColor.value.set(debugObject.depthColor)});\r\n     gui.addColor(debugObject, 'surfaceColor').onChange(() => { waterMaterial.uniforms.uDepthColor.value.set(debugObject.surfaceColor)});\r\n\r\n\r\n    const water = new THREE.Mesh(waterGeometry, waterMaterial);\r\n    water.rotation.x = - Math.PI * 0.5;\r\n    scene.add(water);\r\n\r\n    const camera = new THREE.PerspectiveCamera(70, size.width/size.height, 0.1, 100)\r\n    camera.position.set(1.0, 1.0, 1.0);\r\n    scene.add(camera);\r\n\r\n    window.addEventListener('resize', () => {\r\n\r\n        size.width = window.innerWidth;\r\n        size.height = window.innerHeight;\r\n\r\n        camera.aspect = size.width / size.height;\r\n        camera.updateProjectionMatrix();\r\n\r\n        renderer.setSize(size.width, size.height);\r\n        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\r\n    });\r\n\r\n    const controls = new OrbitControls(camera, canvas);\r\n    controls.enableDamping = true;\r\n\r\n    const renderer = new THREE.WebGLRenderer({\r\n        canvas: canvas\r\n    });\r\n\r\n    renderer.setSize(size.width, size.height);\r\n\r\n    const clock = new THREE.Clock();\r\n    let previousTime = 0;\r\n\r\n    const tick = () => {\r\n        const elapsedTime = clock.getElapsedTime();\r\n        const deltaTime = elapsedTime - previousTime;\r\n        previousTime = elapsedTime;\r\n\r\n        //update water\r\n        waterMaterial.uniforms.uTime.value = elapsedTime;\r\n\r\n        controls.update();\r\n        renderer.render(scene, camera);\r\n        window.requestAnimationFrame(tick);\r\n    };\r\n\r\n    tick();\r\n\r\n    return(\r\n        <>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default RagingSeaShaders;","export const waterVertexShader = `\r\n\r\nuniform float uTime;\r\nuniform float uBigWavesElevation;\r\nuniform vec2 uBigWavesFrequency;\r\nuniform float uBigWavesSpeed;\r\n\r\nuniform float uSmallWavesElevation;\r\nuniform float uSmallWavesFrequency;\r\nuniform float uSmallWavesSpeed;\r\nuniform float uSmallIterations;\r\n\r\nvarying vec2 vUV;\r\nvarying float vElevation;\r\n\r\n//\tClassic Perlin 3D Noise \r\n//\tby Stefan Gustavson\r\n//\r\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\r\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\r\nvec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\r\n\r\nfloat cnoise(vec3 P){\r\n  vec3 Pi0 = floor(P); // Integer part for indexing\r\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\r\n  Pi0 = mod(Pi0, 289.0);\r\n  Pi1 = mod(Pi1, 289.0);\r\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\r\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\r\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\r\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\r\n  vec4 iz0 = Pi0.zzzz;\r\n  vec4 iz1 = Pi1.zzzz;\r\n\r\n  vec4 ixy = permute(permute(ix) + iy);\r\n  vec4 ixy0 = permute(ixy + iz0);\r\n  vec4 ixy1 = permute(ixy + iz1);\r\n\r\n  vec4 gx0 = ixy0 / 7.0;\r\n  vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\r\n  gx0 = fract(gx0);\r\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\r\n  vec4 sz0 = step(gz0, vec4(0.0));\r\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\r\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\r\n\r\n  vec4 gx1 = ixy1 / 7.0;\r\n  vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\r\n  gx1 = fract(gx1);\r\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\r\n  vec4 sz1 = step(gz1, vec4(0.0));\r\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\r\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\r\n\r\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\r\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\r\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\r\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\r\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\r\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\r\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\r\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\r\n\r\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\r\n  g000 *= norm0.x;\r\n  g010 *= norm0.y;\r\n  g100 *= norm0.z;\r\n  g110 *= norm0.w;\r\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\r\n  g001 *= norm1.x;\r\n  g011 *= norm1.y;\r\n  g101 *= norm1.z;\r\n  g111 *= norm1.w;\r\n\r\n  float n000 = dot(g000, Pf0);\r\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\r\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\r\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\r\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\r\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\r\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\r\n  float n111 = dot(g111, Pf1);\r\n\r\n  vec3 fade_xyz = fade(Pf0);\r\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\r\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\r\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \r\n  return 2.2 * n_xyz;\r\n}\r\n\r\nvoid main(){\r\n    vec4 modelPosition = modelMatrix * vec4(position, 1.0);\r\n\r\n    /* Elevation */\r\n    float elevation = sin(modelPosition.x * uBigWavesFrequency.x + uTime * uBigWavesSpeed) *\r\n                      sin(modelPosition.z * uBigWavesFrequency.y + uTime * uBigWavesSpeed) *\r\n                      uBigWavesElevation;\r\n\r\n    for( float i = 1.0; i <= uSmallIterations; i++ ){\r\n        elevation -= abs( \r\n            cnoise(\r\n                vec3(\r\n                    modelPosition.xz * uSmallWavesFrequency * i, \r\n                    uTime * uSmallWavesSpeed\r\n                )\r\n            ) * uSmallWavesElevation / i\r\n        );\r\n    }\r\n\r\n    modelPosition.y += elevation;\r\n\r\n    vec4 viewPosition = viewMatrix * modelPosition;\r\n    vec4 projectionPosition = projectionMatrix * viewPosition;\r\n\r\n    gl_Position = projectionPosition;\r\n\r\n    vUV = uv;\r\n    vElevation = elevation;\r\n}\r\n`","export const waterFragmentShader = `\r\n\r\n    uniform vec3 uDepthColor;\r\n    uniform vec3 uSurfaceColor;\r\n    uniform float uColorOffset;\r\n    uniform float uColorOffsetMultiplier;\r\n\r\n    varying float vElevation;\r\n\r\n    varying vec2 vUV;\r\n\r\n    void main(){\r\n        \r\n        // we are going to mix uDepthColor and uSurfaceColor based on vElevation\r\n        float mixStrength = ( vElevation + uColorOffset ) * uColorOffsetMultiplier;\r\n        vec3 color = mix(uDepthColor, uSurfaceColor, mixStrength);\r\n\r\n\r\n        // gl_FragColor = vec4(0.5, 0.8, 1.0, 1.0);\r\n        gl_FragColor = vec4(color, 1.0);\r\n\r\n    }\r\n\r\n`","import './App.css';\r\nimport RagingSeaShaders from './Components/RagingSeaShaders';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <RagingSeaShaders />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}